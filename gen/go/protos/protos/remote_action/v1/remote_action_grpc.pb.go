// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protos/remote_action/v1/remote_action.proto

package remote_action_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteActionServiceClient is the client API for RemoteActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteActionServiceClient interface {
	ToggleLock(ctx context.Context, in *ToggleLockRequest, opts ...grpc.CallOption) (*RemoteActionResponse, error)
}

type remoteActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteActionServiceClient(cc grpc.ClientConnInterface) RemoteActionServiceClient {
	return &remoteActionServiceClient{cc}
}

func (c *remoteActionServiceClient) ToggleLock(ctx context.Context, in *ToggleLockRequest, opts ...grpc.CallOption) (*RemoteActionResponse, error) {
	out := new(RemoteActionResponse)
	err := c.cc.Invoke(ctx, "/remote_action.RemoteActionService/ToggleLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteActionServiceServer is the server API for RemoteActionService service.
// All implementations must embed UnimplementedRemoteActionServiceServer
// for forward compatibility
type RemoteActionServiceServer interface {
	ToggleLock(context.Context, *ToggleLockRequest) (*RemoteActionResponse, error)
	mustEmbedUnimplementedRemoteActionServiceServer()
}

// UnimplementedRemoteActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteActionServiceServer struct {
}

func (UnimplementedRemoteActionServiceServer) ToggleLock(context.Context, *ToggleLockRequest) (*RemoteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleLock not implemented")
}
func (UnimplementedRemoteActionServiceServer) mustEmbedUnimplementedRemoteActionServiceServer() {}

// UnsafeRemoteActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteActionServiceServer will
// result in compilation errors.
type UnsafeRemoteActionServiceServer interface {
	mustEmbedUnimplementedRemoteActionServiceServer()
}

func RegisterRemoteActionServiceServer(s grpc.ServiceRegistrar, srv RemoteActionServiceServer) {
	s.RegisterService(&RemoteActionService_ServiceDesc, srv)
}

func _RemoteActionService_ToggleLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteActionServiceServer).ToggleLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_action.RemoteActionService/ToggleLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteActionServiceServer).ToggleLock(ctx, req.(*ToggleLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteActionService_ServiceDesc is the grpc.ServiceDesc for RemoteActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote_action.RemoteActionService",
	HandlerType: (*RemoteActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToggleLock",
			Handler:    _RemoteActionService_ToggleLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/remote_action/v1/remote_action.proto",
}
