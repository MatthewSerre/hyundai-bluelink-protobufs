// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: information/v1/information.proto

package information_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformationServiceClient is the client API for InformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformationServiceClient interface {
	GetVehicleInfo(ctx context.Context, in *VehicleInfoRequest, opts ...grpc.CallOption) (*VehicleInfoResponse, error)
}

type informationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInformationServiceClient(cc grpc.ClientConnInterface) InformationServiceClient {
	return &informationServiceClient{cc}
}

func (c *informationServiceClient) GetVehicleInfo(ctx context.Context, in *VehicleInfoRequest, opts ...grpc.CallOption) (*VehicleInfoResponse, error) {
	out := new(VehicleInfoResponse)
	err := c.cc.Invoke(ctx, "/information.InformationService/GetVehicleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServiceServer is the server API for InformationService service.
// All implementations must embed UnimplementedInformationServiceServer
// for forward compatibility
type InformationServiceServer interface {
	GetVehicleInfo(context.Context, *VehicleInfoRequest) (*VehicleInfoResponse, error)
	mustEmbedUnimplementedInformationServiceServer()
}

// UnimplementedInformationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInformationServiceServer struct {
}

func (UnimplementedInformationServiceServer) GetVehicleInfo(context.Context, *VehicleInfoRequest) (*VehicleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleInfo not implemented")
}
func (UnimplementedInformationServiceServer) mustEmbedUnimplementedInformationServiceServer() {}

// UnsafeInformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformationServiceServer will
// result in compilation errors.
type UnsafeInformationServiceServer interface {
	mustEmbedUnimplementedInformationServiceServer()
}

func RegisterInformationServiceServer(s grpc.ServiceRegistrar, srv InformationServiceServer) {
	s.RegisterService(&InformationService_ServiceDesc, srv)
}

func _InformationService_GetVehicleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServiceServer).GetVehicleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/information.InformationService/GetVehicleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServiceServer).GetVehicleInfo(ctx, req.(*VehicleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InformationService_ServiceDesc is the grpc.ServiceDesc for InformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "information.InformationService",
	HandlerType: (*InformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVehicleInfo",
			Handler:    _InformationService_GetVehicleInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "information/v1/information.proto",
}
